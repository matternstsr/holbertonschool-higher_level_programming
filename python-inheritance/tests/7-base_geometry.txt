# 7-is_same_class.py
# Matthew Ernst 6628@holbertonstudents.com


>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> base_geometry = BaseGeometry()

==============================
integer_validator(self, name, value)
==============================

=====Successful Functions=====

--------Regular--------

>>> base_geometry.integer_validator(11, 12)


>>> base_geometry.integer_validator("notaninteger", 12)



=====UnSuccessfull=====

>>> base_geometry.integer_validator(11, 12b)
Traceback (most recent call last):
SyntaxError: invalid decimal literal

------Value is not an integer------

>>> base_geometry.integer_validator("notaninteger!", "notaninteger!")
Traceback (most recent call last):
TypeError: notaninteger! must be an integer

------not enough args------

>>> base_geometry.integer_validator()
Traceback (most recent call last):
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

------Value is missing------

>>> base_geometry.integer_validator(None)
Traceback (most recent call last):
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

------Value is <= 0------

>>> base_geometry.integer_validator("bob", -12)
Traceback (most recent call last):
ValueError: bob must be greater than 0

------Area------

>>> base_geometry.area()
Traceback (most recent call last):
Exception: area() is not implemented

------T or F------

>>> base_geometry.integer_validator("age", False)
Traceback (most recent call last):
TypeError: age must be an integer

------Tuple------

>>> base_geometry.integer_validator("notaninteger", {8, 9})
Traceback (most recent call last):
TypeError: notaninteger must be an integer

------Lists?------

>>> base_geometry.integer_validator("itsalist", [1])
Traceback (most recent call last):
TypeError: itsalist must be an integer

=====End=====