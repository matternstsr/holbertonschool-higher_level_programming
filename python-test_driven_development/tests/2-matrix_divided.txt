
# matrix must be integers or floats  -	typeerror 
# each row of matrixs must be same sized  -	typeerror
# div must be integeror float  -  typeerror
# div can't be 0  -	zerodividionerror
# All elements must be divided by div, and rounded to 2 decimalplaces
# Returns a matrix


The function - def matrix_divided(matrix, div):

=====Successful Functions=====

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [
    ...     [3, 6, 9],
    ...     [12, 15, 18]
    ... ]

--------Successfull Tests--------

------ REGULAR TEST -------------

>>> print(matrix_divided(matrix, 3))
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

------ Negatives --------------

>>> print(matrix_divided(matrix, -3))
[[-1.0, -2.0, -3.0], [-4.0, -5.0, -6.0]]

------infinity FLOATS -------------

>>> print(matrix_divided(matrix, float('inf')))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

------ Floats ----------------

>>> print(matrix_divided(matrix, 0.5))
[[6.0, 12.0, 18.0], [24.0, 30.0, 36.0]]

---------UnSuccessfull tests -----------

------Missing one argument

>>> matrix = [
...	[1, 2, 3],
...	[4, 5, 6]
... ]

>>> print(matrix_divided(matrix, ))
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

------Matrix is not int or float

>>> matrix = [
...     [5, "This is hard", 7],
...     [2, 4, 6]
... ]
>>> print(matrix_divided(matrix, 1.0))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

------Division by Zero

>>> print(matrix_divided(matrix, 0))
Traceback (most recent call last):
ZeroDivisionError: division by zero

------Row sizes are different

>>> matrix = [
...	[1, 2, 3],
...	[4, 5, 6, 7, 8]
... ]

>>> print(matrix_divided(matrix, 7.8))
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size








=====Unsuccessful Functions=====












===END===

